# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:15:10+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class LanguageDetection(BaseModel):
    id: Optional[str] = Field(None, description='id of the text.')
    text: str = Field(..., description='the text itself.')


class LanguageDetectionRequest(RootModel[List[LanguageDetection]]):
    root: List[LanguageDetection] = Field(..., max_length=64, min_length=1)


class LanguagePredicted(BaseModel):
    detected_language: str = Field(
        ..., description='the detected language_code corresponding to the input text.'
    )
    id: Optional[str] = Field(None, description='id of the post.')


class Post(BaseModel):
    id: Optional[str] = Field(None, description='id of the post.', examples=['1'])
    language: str = Field(
        ..., description='language_code of the text.', examples=['en']
    )
    text: str = Field(
        ..., description='the text to be analysed.', examples=['I love the service']
    )


class PostRequest(RootModel[List[Post]]):
    root: List[Post] = Field(..., max_length=32, min_length=1, title='Posts')


class Prediction(BaseModel):
    prediction: str = Field(..., description='the predicted label.', title='Prediction')
    probability: float = Field(
        ..., description='the probability of the predicted label.', title='Probability'
    )


class Sentiment(BaseModel):
    category: Optional[str] = None
    end: Optional[int] = None
    negationTerm: Optional[str] = None
    parentCategory: Optional[str] = None
    positive: Optional[bool] = None
    scale: Optional[float] = None
    start: Optional[int] = None
    text: Optional[str] = None


class Topic(BaseModel):
    category: Optional[str] = None
    end: Optional[int] = None
    polarity: Optional[float] = None
    start: Optional[int] = None
    text: Optional[str] = None
    topic: Optional[str] = None


class TopicSentiment(BaseModel):
    sentence: Optional[str] = None
    sentiment: Optional[Sentiment] = None
    topic: Optional[Topic] = None


class TopicSentimentOutput(BaseModel):
    id: Optional[str] = None
    language: Optional[str] = None
    sentiments: Optional[List[Sentiment]] = None
    text: Optional[str] = None
    topicSentiments: Optional[List[TopicSentiment]] = None
    topics: Optional[List[Topic]] = None


class TopicSentimentResponse(RootModel[List[TopicSentimentOutput]]):
    root: List[TopicSentimentOutput]


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class ValidationErrors(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class Domain(Enum):
    Ecom = 'Ecom'
    Employee = 'Employee'
    Hotel = 'Hotel'
    Restaurant = 'Restaurant'


class LanguageDetectionResponse(RootModel[List[LanguagePredicted]]):
    root: List[LanguagePredicted]


class PostPredicted(BaseModel):
    id: Optional[str] = Field(None, description='id of the post.')
    predictions: List[Prediction] = Field(..., description='the list of predictions.')


class PredictionResults(RootModel[List[PostPredicted]]):
    root: List[PostPredicted] = Field(..., title='Prediction Results')
