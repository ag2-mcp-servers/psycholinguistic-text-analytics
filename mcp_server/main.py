# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:15:10+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    Domain,
    LanguageDetectionRequest,
    LanguageDetectionResponse,
    PostRequest,
    PredictionResults,
    TopicSentimentResponse,
    ValidationErrors,
)

app = MCPProxy(
    contact={
        'email': 'support@symanto.net',
        'name': 'Symanto Support',
        'url': 'https://developers.symanto.net',
    },
    description='We aim to provide the deepest understanding of people through psychology & AI',
    termsOfService='https://developers.symanto.net/terms-of-service',
    title='Psycholinguistic Text Analytics',
    version='1.0',
    servers=[{'url': 'https://api.symanto.net'}],
)


@app.post(
    '/communication',
    description=""" Identify the purpose and writing style of a written text.

Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]

Returned labels:
* action-seeking
* fact-oriented
* information-seeking
* self-revealing """,
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def communication(all: Optional[bool] = False, body: PostRequest = None):
    """
    Communication & Tonality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ekman-emotion',
    description=""" Detect the emotions of the text based on Ekman.

Supported Langauges: [`en`, `de`, `es`]

Returned labels:
* anger
* disgust
* fear
* joy
* sadness
* surprise
* no-emotion """,
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def ekman_emotion(all: Optional[bool] = False, body: PostRequest = None):
    """
    Emotion Analysis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/emotion',
    description=""" Detect the emotions of the text.

Supported Langauges: [`en`, `de`, `es`]

Returned labels:
* anger
* joy
* love
* sadness
* surprise
* uncategorized """,
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def emotion(all: Optional[bool] = False, body: PostRequest = None):
    """
    Emotion Analysis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/language-detection',
    description=""" Identifies what language a text is written in. Only languages that our API supports can be analyzed.

Returned labels:
* language_code of the detected language """,
    tags=['text_language_identification'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def language_detection(body: LanguageDetectionRequest = None):
    """
    Language Detection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/personality',
    description=""" Predict the personality trait of author of any written text.

Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]

Returned labels:

* emotional
* rational """,
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def personality(all: Optional[bool] = False, body: PostRequest = None):
    """
    Personality Traits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sentiment',
    description=""" Evaluate the overall tonality of the text.

Supported Languages: [`en`, `de`, `es`]

Returned labels:
* positive
* negative """,
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def sentiment(all: Optional[bool] = False, body: PostRequest = None):
    """
    Sentiment Analysis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/topic-sentiment',
    tags=['emotion_interpretation', 'message_comm_style_assessment'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def topic_sentiment(domain: Optional[Domain] = None, body: PostRequest = None):
    """
    Extracts topics and sentiments and relates them.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
